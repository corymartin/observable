/*!
 * @preserve
 * Observable Mixin
 * v0.3.0
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */
(function(){"use strict";var root=this;var previousObservable=root.observable;function observable(obj){return extend(obj||{},_observable)}observable.VERSION="0.3.2";var extend=function(target,source){if(!source)return target;for(var key in source){target[key]=source[key]}return target};var slice=function(obj,index){var arr=[];index<<=0;for(;index<obj.length;index++){arr.push(obj[index])}return arr};var _observable={on:function on(evt,callbacks){if(!this._events)this._events={};var handlers=this._events[evt]=this._events[evt]||[];if(typeof callbacks==="function"){callbacks=slice(arguments,1)}for(var i=0;i<callbacks.length;i++){handlers.push(callbacks[i])}return this},off:function off(evt,callbacks){if(!this._events)return this;switch(arguments.length){case 0:this._events={};return this;case 1:this._events[evt]=[];return this;default:var handlers=this._events[evt];if(!handlers||!handlers.length)return this;if(typeof callbacks==="function"){callbacks=slice(arguments,1)}for(var i=0;i<callbacks.length;i++){var cb=callbacks[i];for(var idx=0;idx<handlers.length;idx++){if(handlers[idx]===cb)handlers.splice(idx,1)}}return this}},fire:function fire(evt){if(!this._events)return this;var handlers=this._events[evt];if(!handlers||!handlers.length)return this;var args=slice(arguments,1);var call=!args.length;for(var i=0;i<handlers.length;i++){call?handlers[i].call(this):handlers[i].apply(this,args)}return this},getEvents:function getEvents(){return extend({},this._events)}};observable.noConflict=function(){root.observable=previousObservable;return observable};if(typeof module!=="undefined"&&module.exports){module.exports=observable}else if(typeof define==="function"&&define.amd){define(function(){return observable})}else{root.observable=observable}}).call(this);