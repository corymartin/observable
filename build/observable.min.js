/*!
 * Observable Mixin
 * ================
 * v0.1.1
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */(function(){"use strict";function s(t,s){s=e({on:"on",off:"off",fire:"fire"},s);var o={},u=function(e){var t=e==="bind";return function(e){if(e!=null&&!i(e))return this;if(!t){if(!arguments.length)return o={},this;if(arguments.length===1)return delete o[e],this}if(arguments.length<2)return this;var s=n.call(arguments,1),u=o[e]||(o[e]=[]);return r.call(s,function(e){if(typeof e!="function")return;if(t)return u.push(e);r.call(u,function(t,n){e===t&&u.splice(n,1)})}),this}};return t[s.on]=u("bind"),t[s.off]=u("unbind"),t[s.fire]=function(){if(!arguments.length)return this;var e=arguments[0],t=o[e];if(!t)return this;var i=arguments.length>1?n.call(arguments,1):null;return r.call(t,function(e){i!==null?e.apply(this,i):e.call(this)},this),this},t.getEvents=function(){return e({},o)},t}var e=function(e,t){if(t!=null)for(var n in t)e[n]=t[n];return e},t=Array.prototype,n=t.slice,r=t.forEach||function(e,t){var n=0;for(;n<this.length;n++)e.call(t,this[n],n,this)},i=function(){var e=Object.prototype.toString;return function(t){return e.call(t)==="[object String]"}}();s.VERSION="0.1.2",typeof module!="undefined"&&module.exports?module.exports=s:this.observable=s}).call(this);