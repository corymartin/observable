/*!
 * Observable Mixin
 * ================
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */(function(){"use strict";function a(t){if(t==null||!o(t))return this;if(arguments.length<2)return this;this._events||(this._events={}),this._events[t]||(this._events[t]=[]);var n=u(arguments[1])?arguments[1]:e.call(arguments,1);return s(n,function(e){if(typeof e!="function")return;this._events[t].push(e)},this),this}function f(t){if(t!=null&&!o(t))return this;if(!this._events)return this;if(!arguments.length)return delete this._events,this;if(arguments.length===1)return delete this._events[t],this;var n=u(arguments[1])?arguments[1]:e.call(arguments,1),r=this._events[t];return!r||!r.length?this:(s(n,function(e){s(r,function(t,n){e===t&&r.splice(n,1)})}),this)}function l(){if(!arguments.length||!this._events)return this;var t=arguments[0],n=this._events[t];if(!n)return this;var r=arguments.length>1?e.call(arguments,1):[];return s(n,function(e){e.apply(this,r)},this),this}function c(){return i({},this._events)}function h(e){return i(e,{on:a,off:f,fire:l,getEvents:c})}var e=[].slice,t={}.toString,n="[object String]",r="[object Array]",i=function(e,t){if(t!=null)for(var n in t)e[n]=t[n];return e},s=function(e,t,n){for(var r=0;r<e.length;r++)t.call(n,e[r],r,e)},o=function(e){return t.call(e)===n},u=Array.isArray||function(e){return t.call(e)===r};h.VERSION="0.2.0",typeof module!="undefined"&&module.exports?module.exports=h:this.observable=h}).call(this);