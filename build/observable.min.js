/*!
 * Observable Mixin
 * ================
 * v0.1.1
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */(function(){function e(e,t){"use strict";var n=function(e,t){if(t!=null)for(var n in t)e[n]=t[n];return e},r=Array.prototype,i=r.slice,s=r.forEach||function(e,t){var n=0;for(;n<this.length;n++)e.call(t,this[n],n,this)},o=function(){var e=Object.prototype.toString;return function(t){return e.call(t)==="[object String]"}}();t=n({on:"on",off:"off",fire:"fire"},t);var u={},a=function(e){var t=e==="bind";return function(e){if(e!=null&&!o(e))return this;if(!t){if(!arguments.length)return u={},this;if(arguments.length===1)return delete u[e],this}if(arguments.length<2)return this;var n=i.call(arguments,1),r=u[e]||(u[e]=[]);return s.call(n,function(e){if(typeof e!="function")return;if(t)return r.push(e);s.call(r,function(t,n){e===t&&r.splice(n,1)})}),this}};return e[t.on]=a("bind"),e[t.off]=a("unbind"),e[t.fire]=function(){if(!arguments.length)return this;var e=arguments[0],t=u[e];if(!t)return this;var n=arguments.length>1?i.call(arguments,1):null;return s.call(t,function(e){n!==null?e.apply(this,n):e.call(this)},this),this},e.getEvents=function(){return n({},u)},e}e.VERSION="0.1.1",typeof module!="undefined"&&module.exports?module.exports=e:this.observable=e})();