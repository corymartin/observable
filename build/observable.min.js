/*!
 * Observable Mixin
 * ================
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */(function(){function a(a,b){"use strict";var c=function(a,b){if(b!=null)for(var c in b)a[c]=b[c];return a},d=[].forEach||function(a,b){var c=0,d=this.length;for(;c<d;c++)a.call(b,this[c],c,this)},e=function(a){return{}.toString.call(a)==="[object String]"};b=c({on:"on",off:"off",fire:"fire"},b);var f={},g=function(a){var b=a==="bind";return function(a){if(a!=null&&!e(a))return this;if(!b){if(!arguments.length)return f={},this;if(arguments.length===1)return delete f[a],this}var c=[].slice.call(arguments,1);if(!c.length)return this;var g=f[a]||(f[a]=[]);return d.call(c,function(a){if(typeof a!="function")return;if(b)return g.push(a);d.call(g,function(b,c){a===b&&g.splice(c,1)})}),this}};return a[b.on]=g("bind"),a[b.off]=g("unbind"),a[b.fire]=function(){if(!arguments.length)return this;var a=arguments[0],b=f[a];if(!b)return this;var c=arguments;return d.call(b,function(a){c.length===1?a.call(this):a.apply(this,[].slice.call(c,1))},this),this},a.getEvents=function(){return c({},f)},a}typeof module!="undefined"&&module.exports?module.exports=a:this.observable=a})();