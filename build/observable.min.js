/*!
 * @preserve
 * Observable Mixin
 * v0.3.0
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */
(function(){"use strict";var root=this;var previousObservable=root.observable;function observable(obj){return _extend(obj||{},_observable)}observable.VERSION="0.3.1";var _extend=function(target,source){if(source!=null){for(var key in source){target[key]=source[key]}}return target};var _isArray=Array.isArray||function(){var toString=Object.prototype.toString;var arrayClass="[object Array]";return function(obj){return toString.call(obj)===arrayClass}}();var _observable={on:function on(evt,callbacks){if(!this._events)this._events={};var handlers=this._events[evt]=this._events[evt]||[];var i=0;if(!_isArray(callbacks)){i=1;callbacks=arguments}for(;i<callbacks.length;i++){handlers.push(callbacks[i])}return this},off:function off(evt,callbacks){if(!this._events)return this;if(evt==null){this._events={};return this}if(arguments.length===1){this._events[evt]=[];return this}var handlers=this._events[evt];if(!handlers||!handlers.length)return this;var i=0;if(!_isArray(callbacks)){i=1;callbacks=arguments}for(;i<callbacks.length;i++){var cb=callbacks[i];for(var idx=0;idx<handlers.length;idx++){if(handlers[idx]===cb)handlers.splice(idx,1)}}return this},fire:function fire(evt){if(!this._events)return this;var handlers=this._events[evt];if(!handlers||!handlers.length)return this;var args=[];for(var i=1;i<arguments.length;i++){args.push(arguments[i])}for(var i=0;i<handlers.length;i++){handlers[i].apply(this,args)}return this},getEvents:function getEvents(){return _extend({},this._events)}};observable.noConflict=function(){root.observable=previousObservable;return observable};if(typeof module!=="undefined"&&module.exports){module.exports=observable}else{root.observable=observable}if(typeof define==="function"&&define.amd){define(function(){return observable})}}).call(this);