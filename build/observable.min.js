/*!
 * Observable Mixin
 * ================
 * v0.2.0
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */(function(){"use strict";function s(e){return t(e||{},i)}var e=[].slice,t=function(e,t){if(t!=null)for(var n in t)e[n]=t[n];return e},n=function(e,t,n){for(var r=0;r<e.length;r++)t.call(n,e[r],r,e)},r=Array.isArray||function(){var e={}.toString,t="[object Array]";return function(n){return e.call(n)===t}}(),i={on:function(i,s){this._events||(this._events={});var o=this._events[i]=this._events[i]||[],u=r(s)?s:e.call(arguments,1);return n(u,function(e){o.push(e)}),this},off:function(i,s){if(!this._events)return this;if(i==null)return this._events={},this;if(arguments.length===1)return this._events[i]=[],this;var o=r(s)?s:e.call(arguments,1),u=this._events[i];return n(o,function(e){n(u,function(t,n){e===t&&u.splice(n,1)})}),this},fire:function(r){if(!this._events||!this._events[r])return this;var i=arguments.length>1?e.call(arguments,1):[];return n(this._events[r],function(e){e.apply(this,i)},this),this},getEvents:function(){return t({},this._events)}};s.VERSION="0.2.0",typeof module!="undefined"&&module.exports?module.exports=s:this.observable=s}).call(this);