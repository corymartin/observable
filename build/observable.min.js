/*!
 * @preserve
 * Observable Mixin
 * v0.3.0
 * Adds basic observer pattern functionality to an object.
 * https://github.com/corymartin/observable
 * Copyright (c) 2012 Cory Martin
 * Distributed under the MIT License
 */
(function(){"use strict";var root=this;var previousObservable=root.observable;var _slice=[].slice;var _extend=function(target,source){if(source!=null){for(var key in source){target[key]=source[key]}}return target};var _each=function(array,iterator,context){for(var i=0;i<array.length;i++){iterator.call(context,array[i],i)}};var _toString={}.toString;var _arrayClass="[object Array]";var _isArray=Array.isArray||function(obj){return _toString.call(obj)===_arrayClass};var _observable={on:function on(evt,callbacks){if(!this._events)this._events={};var handlers=this._events[evt]=this._events[evt]||[];callbacks=_isArray(callbacks)?callbacks:_slice.call(arguments,1);_each(callbacks,function(cb){handlers.push(cb)});return this},off:function off(evt,callbacks){if(!this._events)return this;if(evt==null){this._events={};return this}if(arguments.length===1){this._events[evt]=[];return this}var handlers=this._events[evt];if(!handlers||!handlers.length)return this;callbacks=_isArray(callbacks)?callbacks:_slice.call(arguments,1);_each(callbacks,function(cb){_each(handlers,function(fn,i){if(fn===cb)handlers.splice(i,1)})});return this},fire:function fire(evt){if(!this._events)return this;var handlers=this._events[evt];if(!handlers||!handlers.length)return this;var args=arguments.length>1?_slice.call(arguments,1):[];_each(handlers,function(fn){fn.apply(this,args)},this);return this},getEvents:function getEvents(){return _extend({},this._events)}};function observable(obj){return _extend(obj||{},_observable)}observable.VERSION="0.3.0";if(typeof module!=="undefined"&&module.exports)module.exports=observable;else root.observable=observable;observable.noConflict=function(){root.observable=previousObservable;return observable}}).call(this);